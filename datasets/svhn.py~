import sys, os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import numpy as np
import scipy.io as sio

from keras.utils import np_utils
	
class SVHNDataset:
	def __init__(self):
		self.dataset_name = "SVHN"
		self.image_size = 32
		self.num_channels = 3
		self.num_classes = 10
		
	def get_test_dataset(self):
		test = sio.loadmat('~/Downloads/test_32x32.mat')
		X_test = test['X']
		y_test = test['y']
		
		X_test = X_test.reshape(X_test.shape[3],self.image_size,self.image_size,self.num_channels)
		X_test = X_test.astype('float32')
		X_test /= 255
		Y_test = np_utils.to_categorical(y_test, self.num_classes)
		
		del y_test
		return X_test, Y_test
		
	def get_val_dataset(self):
		train = sio.loadmat('~/Downloads/train_32x32.mat')
		X_train = train['X']
		y_train = train['y']
		
		val_size = 5000
		
		X_val = X_train[:val_size]
		X_val = X_val.reshape(X_val.shape[3], self.image_size, self.image_size, self.num_channels)
        X_val = X_val.astype('float32') / 255
        y_val = y_train[:val_size]
        Y_val = np_utils.to_categorical(y_val, self.num_classes)
        del X_train, y_train
        #return X_val, Y_val;
        
	def load_model_by_name(self, model_name, logits=False, input_range_type=1, pre_filter=lambda x:x):

 		if model_name not in ["cleverhans", 'cleverhans_adv_trained', 'carlini', 'pgdtrained', 'pgdbase']:
			raise NotImplementedError("Undefined model [%s] for %s." % (model_name, self.dataset_name))
        self.model_name = model_name

        model_weights_fpath = "%s_%s.keras_weights.h5" % (self.dataset_name, model_name)
        model_weights_fpath = os.path.join('downloads/trained_models', model_weights_fpath)

        # self.maybe_download_model()
        if model_name in ["cleverhans", 'cleverhans_adv_trained']:
            model = cleverhans_mnist_model(logits=logits, input_range_type=input_range_type, pre_filter=pre_filter)
        elif model_name in ['carlini']:
            model = carlini_mnist_model(logits=logits, input_range_type = input_range_type, pre_filter=pre_filter)
        elif model_name in ['pgdtrained', 'pgdbase']:
            model = pgdtrained_mnist_model(logits=logits, input_range_type = input_range_type, pre_filter=pre_filter)
        print("\n===Defined TensorFlow model graph.")
        model.load_weights(model_weights_fpath)
        print ("---Loaded MNIST-%s model.\n" % model_name)
        return model

if __name__ == '__main__':
    # from datasets.mnist import *
    dataset = SVHNDataset()
    X_test, Y_test = dataset.get_test_dataset()
    print (X_test.shape)
    print (Y_test.shape)

    model_name = 'cleverhans'
    model = dataset.load_model_by_name(model_name)

    model.compile(loss='categorical_crossentropy',optimizer='sgd', metrics=['acc'])
    _,accuracy = model.evaluate(X_test, Y_test, batch_size=128)
    print ("\nTesting accuracy: %.4f" % accuracy)
